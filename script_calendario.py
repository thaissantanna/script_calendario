"""
Script para gera√ß√£o de calend√°rio operacional com feriados do Rio de Janeiro
"""

import os
import locale
import logging
import calendar
from datetime import datetime, date, timedelta
from dateutil.relativedelta import relativedelta
from dateutil.easter import easter
import pandas as pd
import holidays
from holidays.countries import Brazil
from typing import List, Tuple


# Configura√ß√µes globais
CONFIG = {
    "caminho_base": r"{SEU CAMINHO AQUI}",
    "formato_data": "%d/%m/%Y",
    "colunas": ["DATA", "ANOMES", "SEMANA", "DIA_SEMANA", "FL_SAZ", "FL_FER"],
    "nome_arquivo": "{NOME DO ARQUIVO}"
}

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('calendario.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)


def configurar_localidade():
    """Configura o locale para portugu√™s do Brasil com fallback"""
    try:
        locale.setlocale(locale.LC_TIME, "Portuguese_Brazil.1252")
    except locale.Error:
        try:
            locale.setlocale(locale.LC_TIME, "pt_BR.utf8")
        except locale.Error:
            logger.warning(
                "‚ö† Locale portugu√™s n√£o dispon√≠vel. Usando padr√£o do sistema.")


class FeriadosRJ(Brazil):
    """Classe estendida de feriados brasileiros com especificidades do RJ"""

    TRADUCAO_FERIADOS = {
        "Universal Fraternization Day": "Ano Novo",
        "Good Friday": "Sexta-Feira Santa",
        "Tiradentes' Day": "Dia de Tiradentes",
        "Saint George's Day": "Dia de S√£o Jorge",
        "Labor Day": "Dia do Trabalhador",
        "Worker's Day": "Dia do Trabalhador",
        "Independence Day": "Independ√™ncia do Brasil",
        "Our Lady of Aparecida": "Dia de Nossa Senhora Aparecida",
        "All Souls' Day": "Finados",
        "Republic Proclamation Day": "Proclama√ß√£o da Rep√∫blica",
        "National Day of Zumbi and Black Awareness": "Dia Nacional de Zumbi e da Consci√™ncia Negra",
        "Christmas Day": "Natal",
        "Corpus Christi": "Corpus Christi",
    }

    def __init__(self, **kwargs):
        """Inicializa com configura√ß√µes espec√≠ficas do RJ"""
        kwargs["language"] = "pt"
        kwargs["subdiv"] = "RJ"
        super().__init__(**kwargs)

        ano = self.years.pop()
        self._add_feriados_municipais(ano)
        self._add_feriados_calculados(ano)

    def _add_feriados_municipais(self, ano: int):
        """Adiciona feriados municipais fixos"""
        self[date(ano, 1, 20)] = "Dia de S√£o Sebasti√£o (Padroeiro do RJ)"
        self[date(ano, 3, 1)] = "Anivers√°rio da Cidade do Rio de Janeiro"

    def _add_feriados_calculados(self, ano: int):
        """Calcula feriados m√≥veis baseados na P√°scoa"""
        data_pascoa = easter(ano)
        self[data_pascoa - timedelta(days=48)] = "Carnaval"
        self[data_pascoa - timedelta(days=47)] = "Carnaval"
        self[data_pascoa - timedelta(days=2)] = "Sexta-Feira Santa"
        self[data_pascoa + timedelta(days=60)] = "Corpus Christi"

    def get(self, data: date) -> str:
        """Retorna feriado traduzido"""
        nome_feriado = super().get(data)
        return self.TRADUCAO_FERIADOS.get(nome_feriado, nome_feriado)


def criar_estrutura_diretorios(ano: int, mes: int) -> str:
    """Cria estrutura de diret√≥rios e retorna caminho completo do arquivo"""
    nome_pasta = os.path.join(CONFIG["caminho_base"], f"{ano}{mes:02d}")

    if not os.path.isabs(CONFIG["caminho_base"]):
        raise ValueError("‚ùå Caminho base deve ser absoluto")

    os.makedirs(nome_pasta, exist_ok=True)
    return os.path.join(nome_pasta, CONFIG["nome_arquivo"])


def gerar_dados_calendario(ano: int, mes: int) -> List[Tuple]:
    """Gera os dados do calend√°rio para o m√™s especificado"""
    feriados_rj = FeriadosRJ(years=ano)
    ultimo_dia = calendar.monthrange(ano, mes)[1]
    anomes = date(ano, mes, 1).strftime(CONFIG["formato_data"])

    dados = []
    semana_do_mes = 1

    for dia in range(1, ultimo_dia + 1):
        data_atual = date(ano, mes, dia)
        timestamp = pd.Timestamp(data_atual)
        nome_feriado = feriados_rj.get(data_atual)

        dia_semana = (timestamp.weekday() + 2) % 7 or 7  # 1=Dom, 7=S√°b

        dados.append((data_atual.strftime(CONFIG["formato_data"]),
                      anomes,
                      semana_do_mes,
                      dia_semana,
                      nome_feriado if nome_feriado else "",
                      1 if nome_feriado else 0))

        # Atualiza contador de semanas
        if dia_semana == 1 and dia > 1:
            semana_do_mes += 1

    return dados


def validar_arquivo_gerado(nome_arquivo: str):
    """Realiza valida√ß√µes b√°sicas do arquivo gerado"""
    if not os.path.exists(nome_arquivo):
        raise FileNotFoundError(f"‚ùå Arquivo {nome_arquivo} n√£o foi criado!")

    if os.path.getsize(nome_arquivo) < 1024:
        raise ValueError("‚ö† Arquivo gerado parece estar vazio ou corrompido!")


def main():
    """Fluxo principal de execu√ß√£o"""
    try:
        configurar_localidade()
        print("\n===================================")
        print("üöÄ Iniciando gera√ß√£o de calend√°rio")
        print("===================================\n")

        hoje = datetime.today()
        data_alvo = hoje.replace(day=1) + relativedelta(months=1)
        ano, mes = data_alvo.year, data_alvo.month

        print(f"üìÖ Processando m√™s alvo: {mes:02d}/{ano}")

        nome_arquivo = criar_estrutura_diretorios(ano, mes)
        dados = gerar_dados_calendario(ano, mes)

        df = pd.DataFrame(dados, columns=CONFIG["colunas"])
        df.to_excel(nome_arquivo, index=False)

        validar_arquivo_gerado(nome_arquivo)

        print("\n===================================")
        print(f"‚úÖ Arquivo gerado com sucesso!")
        print(f"üìÇ Caminho: {nome_arquivo}")
        print("===================================\n")

    except Exception as e:
        print("\n‚ùå ERRO CR√çTICO! Execu√ß√£o abortada!")
        print("Detalhes do erro: ", str(e))
        print("===================================\n")
        logger.error(f"Erro na execu√ß√£o: {str(e)}", exc_info=True)
        raise


if __name__ == "__main__":
    main()
